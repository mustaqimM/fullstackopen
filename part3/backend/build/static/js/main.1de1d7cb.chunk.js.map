{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","changedNote","returnedNote","catch","error","setTimeout","n","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"qLAEMA,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,S,OCD9BK,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,8BACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,UCC7BK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,qBAAKJ,UAAU,QAAf,SAAwBI,KC+ElBC,EAhFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAQAC,qBANa,WACXC,IAAqB5B,MAAK,SAAC6B,GACzBT,EAASS,QAIG,IAEhBC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAkBMC,EAAcV,EAAUJ,EAAQA,EAAMe,QAAO,SAAC1B,GAAD,OAAUA,EAAKG,aAsBlE,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASS,IACvB,6BACGQ,EAAYE,KAAI,SAAC3B,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA7BH,SAACJ,GACxB,IAAMG,EAAOW,EAAMiB,MAAK,SAAC5B,GAAD,OAAUA,EAAKH,KAAOA,KACxCgC,EAAW,2BAAQ7B,GAAR,IAAcG,WAAYH,EAAKG,YAEhDiB,EACUvB,EAAIgC,GACXrC,MAAK,SAACsC,GACLlB,EAASD,EAAMgB,KAAI,SAAC3B,GAAD,OAAWA,EAAKH,KAAOA,EAAKG,EAAO8B,SAEvDC,OAAM,SAACC,GACNd,EAAgB,QAAD,OACLlB,EAAKK,QADA,yCAGf4B,YAAW,WACTf,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAACQ,GAAD,OAAOA,EAAErC,KAAOA,SAaVI,CAAiBD,EAAKH,MAFzCG,EAAKH,SAMhB,uBAAMsC,SArDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBjC,QAASQ,EACT0B,MAAM,IAAIC,MAAOC,cACjBtC,UAAWuC,KAAKC,OAAS,IAG3BvB,EAAmBkB,GAAY9C,MAAK,SAACsC,GACnClB,EAASD,EAAMiC,OAAOd,IACtBhB,EAAW,QA2CX,UACE,uBAAO+B,MAAOhC,EAASiC,SAxCJ,SAACV,GACxBtB,EAAWsB,EAAMW,OAAOF,UAwCpB,wBAAQG,KAAK,SAAb,qBAEF,yBAAQ1C,QAAS,kBAAMU,GAAYD,IAAnC,kBACQA,EAAU,YAAc,a,MC1EtCkC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1de1d7cb.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then((response) => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then((response) => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then((response) => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n}\n","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <div>\n      <li className=\"note\">\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n      </li>\n    </div>\n  )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return <div className=\"error\">{message}</div>\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\n\nimport Note from './components/Note'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note...')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes)\n    })\n  }\n\n  useEffect(hook, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random < 0.5,\n    }\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important)\n\n  const toggleImportance = (id) => {\n    const note = notes.find((note) => note.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note ${note.content} was already removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter((n) => n.id !== id))\n      })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportance(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <button onClick={() => setShowAll(!showAll)}>\n        Show {showAll ? 'Important' : 'All'}\n      </button>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}